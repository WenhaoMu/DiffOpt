('out_directory: '
 './experiments/compound/multi_DKL/1469983670/wandb/run-20231123_004959-1zdl9bc7/files')
The device used is : cuda
[0.00316918 0.0072529  0.01241131 0.01619215 0.01927074 0.02262353
 0.02631122 0.03051457 0.03533518 0.04085936 0.04722409 0.05451293
 0.06284052 0.07218581 0.08231845 0.09331833 0.10262941 0.10205275
 0.09619775 0.07277971]
[8.04357011e-05 1.55209298e-04 2.54620596e-04 4.14302588e-04
 6.38217224e-04 9.84181489e-04 1.50528217e-03 2.31866121e-03
 3.53105144e-03 5.40530577e-03 8.22762856e-03 1.25651040e-02
 1.91752106e-02 2.92109897e-02 4.44344599e-02 6.75275126e-02
 1.02493418e-01 1.55253617e-01 2.32940838e-01 3.12883848e-01]
[0.00728425 0.01237513 0.01647989 0.01936922 0.02239991 0.02568588
 0.02940139 0.03360057 0.03837965 0.04378923 0.04995495 0.05677969
 0.06451715 0.07293327 0.08162211 0.09029759 0.09688753 0.10286416
 0.08768646 0.04769183]
DEVICE: cuda
/nethome/wmu30/anaconda3/envs/design-baseliness/lib/python3.7/site-packages/gpytorch/lazy/triangular_lazy_tensor.py:136: UserWarning: torch.triangular_solve is deprecated in favor of torch.linalg.solve_triangularand will be removed in a future PyTorch release.
torch.linalg.solve_triangular has its arguments reversed and does not return a copy of one of the inputs.
X = torch.triangular_solve(B, A).solution
should be replaced with
X = torch.linalg.solve_triangular(A, B). (Triggered internally at ../aten/src/ATen/native/BatchLinearAlgebra.cpp:2115.)
  res = torch.triangular_solve(right_tensor, self.evaluate(), upper=self.upper).solution
Traceback (most recent call last):
  File "design_baselines/diff_multi/DKL_train_regression_x0_multi.py", line 714, in <module>
    device=device,
  File "design_baselines/diff_multi/DKL_train_regression_x0_multi.py", line 432, in run_classifier
    loss = -mll(output, train_Y)
  File "/nethome/wmu30/anaconda3/envs/design-baseliness/lib/python3.7/site-packages/gpytorch/module.py", line 30, in __call__
    outputs = self.forward(*inputs, **kwargs)
  File "/nethome/wmu30/anaconda3/envs/design-baseliness/lib/python3.7/site-packages/gpytorch/mlls/variational_elbo.py", line 77, in forward
    return super().forward(variational_dist_f, target, **kwargs)
  File "/nethome/wmu30/anaconda3/envs/design-baseliness/lib/python3.7/site-packages/gpytorch/mlls/_approximate_mll.py", line 58, in forward
    log_likelihood = self._log_likelihood_term(approximate_dist_f, target, **kwargs).div(num_batch)
  File "/nethome/wmu30/anaconda3/envs/design-baseliness/lib/python3.7/site-packages/gpytorch/mlls/variational_elbo.py", line 61, in _log_likelihood_term
    return self.likelihood.expected_log_prob(target, variational_dist_f, **kwargs).sum(-1)
  File "/nethome/wmu30/anaconda3/envs/design-baseliness/lib/python3.7/site-packages/gpytorch/likelihoods/gaussian_likelihood.py", line 45, in expected_log_prob
    res = ((target - mean) ** 2 + variance) / noise + noise.log() + math.log(2 * math.pi)
RuntimeError: The size of tensor a (3) must match the size of tensor b (128) at non-singleton dimension 1
output:  torch.Size([128]) train_Y:  torch.Size([128, 3])